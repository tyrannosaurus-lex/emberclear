stages:
  - setup
  - quality
  - test
  - build
  - analyze
  - deploy

# NOTE: reinstalling is faster than cache...
# cache:
#   # untracked: true
#   key: ${CI_COMMIT_REF_SLUG}
#   paths:
#     - ${CI_PROJECT_DIR}/.cache_yarn
#     - ${CI_PROJECT_DIR}/packages/frontend/node_modules

# need an image that has chrome, and eventually firefox
# image: node:10
image: danlynn/ember-cli:latest
# image: ubuntu:latest

variables:
  YARN_CACHE_FOLDER: ${CI_PROJECT_DIR}/.cache_yarn
  DOCKER_DRIVER: overlay2
  NETLIFY_CLI_VERSION: 0.4.0
  NODE_OPTIONS: --max-old-space-size=2048
  COVERAGE: 'true'
  PERCY_ENABLE: 0
  CI_BROWSER: chrome


# TODO: HACK: for now, it's faster to install everything
#       than it is to rely on gitlab's slow cache
before_script:
  # - time npm install -g yarn@latest
  # - apt install wget
  # - wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
  # - dpkg -i google-chrome-stable_current_amd64.deb
  # - wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash
  # - nvm install 10
  # - apt install firefox
  - time ./run yarn install

Security via Synk:
  stage: setup
  script:
    - time npm install -g snyk
    - time ( cd ${CI_PROJECT_DIR}/packages/frontend && snyk test --severity-threshold=high )


Lint JS/TS:
  stage: quality
  dependencies: [ setup ]
  script:
    - time ./run yarn lint:js

Lint Templates:
  stage: quality
  dependencies: [ setup ]
  script:
    - time ./run yarn lint:hbs

Lint SCSS:
  stage: quality
  dependencies: [ setup ]
  script:
    - time ./run yarn lint:sass

Check Types:
  stage: quality
  dependencies: [ setup ]
  script:
    - time ./run yarn tsc

Translations:
  stage: quality
  dependencies: [ setup ]
  script: time ./run yarn lint:i18n


All Tests:
  stage: test
  dependencies: [ setup ]
  script:
    - time COVERAGE=true ./run yarn test
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/packages/frontend/coverage*

# Unit Tests:
#   stage: test
#   dependencies: [ setup ]
#   script:
#     - time ./run yarn test:named Unit
#   artifacts:
#     paths:
#       - ${CI_PROJECT_DIR}/packages/frontend/coverage*

# Helper Tests:
#   stage: test
#   dependencies: [ setup ]
#   script:
#     - time ./run yarn test:named Helper
#   artifacts:
#     paths:
#       - ${CI_PROJECT_DIR}/packages/frontend/coverage*

# Integration Tests:
#   stage: test
#   dependencies: [ setup ]
#   script:
#     - time ./run yarn test:named Integration
#   artifacts:
#     paths:
#       - ${CI_PROJECT_DIR}/packages/frontend/coverage*

# Application Tests:
#   stage: test
#   dependencies: [ setup ]
#   script:
#     - google-chrome --version
#     - node --version
#     - npm --version
#     - uname -a
#     - lsb_release -a
#     - time COVERAGE=true ./run yarn test
#     - PERCY_ENABLE=1 ./run yarn test:named Acceptance
#   artifacts:
#     paths:
#       - ${CI_PROJECT_DIR}/packages/frontend/coverage*

# Application Tests (a11y):
#   stage: test
#   dependencies: [ setup ]
#   # for now -- this is a big task
#   allow_failure: true
#   script:
#     - PERCY_ENABLE=0 ./run yarn test:named Acceptance --query enableA11yAudit=true

Merge Coverage:
  stage: build
  dependencies:
    - All Tests
    # - Application Tests
    # - Application Tests (a11y)
    # - Integration Tests
    # - Helper Tests
    # - Unit Tests
  script:
    - time ./run yarn merge-coverage
    - cat ${CI_PROJECT_DIR}/packages/frontend/coverage/coverage-summary.json
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/packages/frontend/coverage/

Build Production:
  stage: build
  dependencies: [ setup ]
  only: [ master ]
  script:
    - time ./run yarn build:production
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/packages/frontend/dist

Analyze Bundle:
  stage: build
  dependencies: [ setup ]
  only: [ master ]
  script:
    - time ./run yarn analyze
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/packages/frontend/public/bundle.html

Deploy Production:
  stage: deploy
  only: [ master ]
  dependencies:
    - Merge Coverage
    - Analyze Bundle
    - Build Production
  before_script: [ ]
  script:
    - mv ${CI_PROJECT_DIR}/packages/frontend/coverage public/
    - cp ${CI_PROJECT_DIR}/packages/frontend/public/bundle.html ${CI_PROJECT_DIR}/packages/frontend/dist/bundle.html
    - cp ${CI_PROJECT_DIR}/packages/frontend/public/bundle.html public/bundle.html
    - time ./scripts/publish

Deploy Docker Image:
  stage: deploy
  only: [ master ]
  image: docker
  services:
   - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
  dependencies:
   - Build Production
   - Merge Coverage
   - Analyze Bundle
  before_script: [ ]
  script:
    - ls -la ./scripts
    - time sh ./scripts/dockerhub

pages:
  stage: deploy
  only: [ master ]
  dependencies:
    - Merge Coverage
    - Analyze Bundle
  before_script: [ ]
  script:
    - mkdir -p public/$CI_COMMIT_REF_NAME
    - mv ${CI_PROJECT_DIR}/packages/frontend/coverage public/$CI_COMMIT_REF_NAME
    - mv ${CI_PROJECT_DIR}/packages/frontend/public/bundle.html public/$CI_COMMIT_REF_NAME
  artifacts:
    paths:
      - public
    expire_in: 30 days

# Setup is currently worthless, because it's faster
# to install everything at every stage than to rely on cache...
setup:
  stage: setup
  script:
    - echo "skip"
    # - time ./run yarn install

